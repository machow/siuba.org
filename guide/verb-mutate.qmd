---
title: Mutate to transform
jupyter:
  jupytext:
    formats: 'qmd:quarto'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
#| include: false
import pandas as pd
pd.set_option("display.max_rows", 5)
```

The `mutate()` function creates a new column of data, or overwrite an existing one.

We'll use a subset of the `mtcars` dataset for examples.

```{python}
from siuba import _, group_by, mutate, select
from siuba.data import mtcars

small_cars = mtcars[["mpg", "cyl", "hp"]]
```

## Basics

```{python}
small_cars >> mutate(mpg_per_cyl = _.mpg / _.cyl)
```

## Replacing columns

When a created column is given the same name as an existing column, it replaces that column
in the data.

```{python}
small_cars >> mutate(mpg = _.mpg - _.mpg.mean(), new_column = 1)
```

Note that replacement columns are put in the same position as the original columns.
For example, in the result above, the `mpg` column is still in the first position on the left.


## Using previous arguments

Arguments can refer to columns that were created in earlier arguments.

```{python}
small_cars >> mutate(cyl2 = _.cyl * 2, cyl4 = _.cyl2 * 2)
```

In the code above, `cyl4` uses the earlier argument `cyl2`.

## Grouped mutates

```{python}
(small_cars
  >> group_by(_.cyl)
  >> mutate(
       hp_mean = _.hp.mean(),
       demeaned_hp = _.hp - _.hp_mean
     )
  )
```

```{python}
(small_cars
  >> group_by(_.cyl)
  >> mutate(
       hp_per_cyl = _.hp / _.cyl,
       diff = _.hp_per_cyl - _.hp_per_cyl.shift(1)
     )
  )
```

