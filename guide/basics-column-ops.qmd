---
title: Column operations
jupyter:
  jupytext:
    formats: 'qmd:quarto'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
#| include: false
import pandas as pd

pd.set_option("display.max_rows", 5)
```

## Series methods come from Pandas

## Lazy functions

## Calling external functions

```{python}
import pandas as pd
from siuba import _, mutate
from siuba.siu import call

my_dates = pd.DataFrame({"date": ["2021-01-01", "2021-01-02"]})

pd.to_datetime(my_dates.date)
```

```{python}
my_dates >> mutate(parsed = _.date) >> _.parsed
```

```{python}
my_dates >> mutate(parsed = call(pd.to_datetime, _.date))
```

:::{.callout-note}
You may be familiar with the `pd.Series.pipe()` method, which could handle the
situation using `_.date.pipe(...)`:

```{python}
#| output: false
my_dates >> mutate(parsed = _.date.pipe(pd.to_datetime))
```

Be careful with this approach, since it will work in situations involving pandas DataFrames, but `call()` works
in any situation!
:::

