---
title: "Reshape tables 📝"
jupyter:
  jupytext:
    formats: 'qmd:quarto'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
#| include: false

import pandas as pd

pd.set_option("display.max_rows", 5)
```

```{python}
import pandas as pd
from siuba import _, spread, gather

costs = pd.DataFrame({
    'id': [1,2],
    'price_x': [.1, .2],
    'price_y': [.4, .5],
    'price_z': [.7, .8]
})

costs
```

## Gather data long

```{python}
# selecting each variable manually
costs >> gather('measure', 'value', _.price_x, _.price_y, _.price_z)

# selecting variables using a slice
costs >> gather('measure', 'value', _["price_x":"price_z"])

# selecting by excluding id
costs >> gather('measure', 'value', -_.id)
```

## Spread data wide

```{python}
(costs
    >> gather('measure', 'value', -_.id)
    >> spread('measure', 'value')
)
```

## Experimental pivot_wider, pivot_longer

:::{.callout-warning}

These functions are thoroughly tested, but currently experimental.
The sections below describe their basic use.
See their [reference page](../api/verb-pivot) for more examples.

:::

```{python}
from siuba.experimental.pivot import pivot_wider, pivot_longer
from siuba import Fx
```


### `pivot_wider()`

If there would be multiple entries per cell in the spread wide data,
then the `spread()` function raises an error.

This is shown below, where there are duplicate entries where `id=1` and `measure="a"`.

```{python}
#| error: true

df = pd.DataFrame({
    "id": [1, 1, 2],
    "measure": ["a", "a", "b"],
    "value": [8, 9, 10]
})

df >> spread("measure", "value")
```

Use the `pivot_wider()` function to deal with this situation.

```{python}
df >> pivot_wider(_.id, names_from=_.measure, values_from=_.value, values_fn=tuple)
```

Notice that the top-left entry is a list of two values, `(8, 9)`.
The `values_fn` argument is able to reduce those values down to one.

For example, by taking the mean.

```{python}
df >> pivot_wider(_.id, names_from=_.measure, values_from=_.value, values_fn="mean")
```

Note that `values_fn=` may be a lambda function.


:::{.callout-note}
If you'd rather use pandas's `pivot_table()` method, siuba can pipe to it using this syntax:

```{python}
#| eval: false
(df
    >> _.pivot_table(...)
)
```

Where you would replace `...` with your arguments. See [flexible piping](./programming-pipes.qmd) for more details.
:::

### `pivot_longer()`

Use `pivot_longer()` to stack columns of data, turning them into rows.

```{python}
wide = pd.DataFrame({"id": [1, 2], "x": [5, 6], "y": [7, 8]})

wide
```

Notice that this data has two columns (`x` and `y`) that you might want to stack
on top of each other.

```{python}
df >> pivot_longer(~_.id, names_to="variable", values_to="number")
```

Note that in the code above, we do the following:

* Use `~_.id` selects every columns *except* `id` for stacking.
* Set column names to be stored in a new `variable` column.
* Set column values to be stored in a new `value` column.


