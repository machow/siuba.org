---
title: "Lazy expressions"
jupyter:
  jupytext:
    formats: 'qmd:quarto'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---


```{python}
#| include: false
import pandas as pd

pd.set_option("display.max_rows", 5)
```

A siu expression is a way of specifying **what** action you want to perform.
This allows siuba verbs to decide **how** to execute the action, depending on whether your data is a local DataFrame or remote table.

```{python}
from siuba import _

_.cyl == 4
```

Notice how the output represents each step in our lazy expression, with these pieces:

* black box â–ˆ - a method like checking equality (`==`) or getting an attribute (`.`).
* underscore (`_`) - a placeholder for some data


## As a lambda shorthand

We can use siu expressions like lambda functions.
For example, to keep specific rows of a pandas DataFrame.

```{python}
from siuba.data import mtcars

# old approach: repeat name
mtcars[mtcars.cyl == 4]

# old approach: lambda
mtcars[lambda _: _.cyl == 4]

# siu approach
mtcars[_.cyl == 4]
```
