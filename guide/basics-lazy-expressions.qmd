---
title: "Lazy expressions"
jupyter:
  jupytext:
    formats: 'qmd:quarto'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---


```{python}
#| include: false
import pandas as pd

pd.set_option("display.max_rows", 5)
```

A siu expression is a way of specifying **what** action you want to perform.
This allows siuba verbs to decide **how** to execute the action, depending on whether your data is a local DataFrame or remote table.

```{python}
from siuba import _

_.cyl == 4
```

Notice how the output represents each step in our lazy expression, with these pieces:

* black box â–ˆ - a method like checking equality (`==`) or getting an attribute (`.`).
* underscore (`_`) - a placeholder for some data

## Methods and lazy functions

## Use in pipes

Sometimes it is helpful to use Pandas DataFrame methods, in addition to siuba verbs.
This can be done by piping the data to `_.<some_method>()`.

Here is an example using the siuba verb `count()`, with the pandas method `.sort_values()`.
```{python}
from siuba import _, count
from siuba.data import mtcars

(mtcars
    >> count(_.cyl)         # this is a siuba verb
    >> _.sort_values("n")   # this is a pandas method
)
```

Here is another example, using the DataFrame `.shape` attribute.

:::{layout-ncol=2}


```{python}
# siuba pipe
mtcars >> _.shape[0]
```

```{python}
#| output: false
# regular pandas
mtcars.shape[0]
```

:::


## Call external functions


```{python}
import pandas as pd
from siuba import _, mutate
from siuba.siu import call

my_dates = pd.DataFrame({"date": ["2021-01-01", "2021-01-02"]})

pd.to_datetime(my_dates.date)
```

```{python}
my_dates >> mutate(parsed = _.date) >> _.parsed
```

```{python}
my_dates >> mutate(parsed = call(pd.to_datetime, _.date))
```

## Common challenges

### Reserved words (`_.class`)

Most column names can be referred to using `_.some_name` syntax.
However, python reserved words like `class` can't be used in this way.

Use indexing (e.g. `_["some_name"]`) to refer to any column by name.

```{python}
#| eval: false

# bad: raises a SyntaxError
_.class

# good
_["class"]
```

Moreover, pandas reserves names for its methods (e.g. `_.shape` or `_.mean`).
This is also solved by indexing.

```{python}
#| eval: false
df = pd.DataFrame({"mean": [1,2,3]})

# bad: is accessing the mean method
df.mean + 1

# good (pandas)
df["mean"]

# good (siuba)
_["mean"]
```

### Logical keywords: `and`, `or`, `in`

In order to 

```{python}
import pandas as pd

df = pd.DataFrame({"x": [True, False, None]})

# base python
True or False

# pandas
df.x | False
```

```{python}
# base python
True and False

# pandas
df.x & False
```

```{python}
# base python
True in [True, None]

# pandas
df.x.isin([True, None])
```


### Google colab overrides `_`

Google colab uses very old versions of the library ipykernel, which has a bug in it.
This causes it to continuously overwrite the `_` variable.

To fix this, rename the `_` variable imported from siuba.

```{python}
from siuba import _ as D, filter
from siuba.data import mtcars

mtcars >> filter(D.mpg > 30)
```
