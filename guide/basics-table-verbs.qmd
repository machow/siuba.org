---
title: Table verbs
jupyter:
  jupytext:
    formats: 'qmd:quarto'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---


Table verbs take one or more tables as input, and return a table as output.

```{python}
from siuba import _, count, filter, mutate, select
from siuba.data import mtcars
```

## Syntax


:::{layout-ncol=2}

```{python}
# preferred: pipe data to verb
mtcars >> count(_.cyl)
```


```{python}
#| output: false

# call directly
count(mtcars, _.cyl)
```

:::


## Verbs using tidyselection

Some verbs---like `select()` for keeping specific columns---use a special syntax called tidyselection.
This syntax can be thought of as a mini-language for specifying a set of columns, either
by inclusion or exclusion.

::: {.panel-tabset}

## Siuba

```{python}
#| output: false
# keep cyl column
mtcars >> select(_.cyl)

# keep all *except* cyl column
mtcars >> select(-_.cyl)

# complex select, plus rename cyl to cylinder
mtcars >> select(_.cylinder == _.cyl, _.startswith("m"))
```

## Pandas

```{python}
#| output: false
# keep cyl column
mtcars[["cyl"]]

# keep all *except* cyl column
mtcars.drop(["cyl"], axis=1)

# complex select, plus rename cyl to cylinder
cols = mtcars.columns
mtcars.loc[:, (cols == "cyl") | cols.str.startswith("m")] \
      .rename({"cyl": "cylinder"})
```

:::

More options for tidyselection exist, such as matching patterns, or slicing.
See the [select columns page](./verb-select.qmd) for a discussion of all tidyselect options.



