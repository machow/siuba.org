---
title: Overview
aliases:
  - ../index.html
jupyter:
  jupytext:
    formats: 'qmd:quarto'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.0
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
---

```{python}
#| include: false
import pandas as pd
pd.set_option("display.max_rows", 5)
import matplotlib

%matplotlib inline
```

:::{.callout-warning}
These docs are a work in progress. Note that install directions point to a development branch of siuba.

```
pip install -e git+https://github.com/machow/siuba.git@dev-docs#egg=siuba
```
:::

Siuba is a tool for concise, flexible data-analysis over multiple data sources. It currently supports pandas DataFrames and SQL tables.


## Installing


```bash
pip install -e git+https://github.com/machow/siuba.git@dev-docs#egg=siuba
```

## Basic use

The code below uses the example DataFrame mtcars, to get the average horsepower (hp) per cylinder.

```{python}
from siuba import _, group_by, summarize
from siuba.data import mtcars

(mtcars
  >> group_by(_.cyl)
  >> summarize(avg_hp = _.hp.mean())
  )
```

There are three key concepts in this example:


| concept | example | meaning |
| ------- | ------- | ------- |
| verb    | `group_by(...)` | a function that operates on a table, like a DataFrame or SQL table |
| lazy expression | `_.hp.mean()` | an expression created with `siuba._`, that represents actions you want to perform |
| pipe | `mtcars >> group_by(...)` | a syntax that allows you to chain verbs with the `>>` operator |

## Lazy expressions (`_`)

A siu expression is a way of specifying **what** action you want to perform.
This allows siuba verbs to decide **how** to execute the action, depending on whether your data is a local DataFrame or remote table.

```{python}
from siuba import _

_.cyl == 4
```

Notice how the output represents each step in our lazy expression, with these pieces:

* black box â–ˆ - a method like checking equality (`==`) or getting an attribute (`.`).
* underscore (`_`) - a placeholder for a table of data.

We can use these expressions like lambda functions.
For example, to keep specific rows of a pandas DataFrame.

```{python}
# old approach: repeat name
mtcars[mtcars.cyl == 4]

# old approach: lambda
mtcars[lambda _: _.cyl == 4]

# siu approach
mtcars[_.cyl == 4]
```

Note that like the lambda function, siuba avoids typing the same (potentially_very_long) name twice, while also being a bit shorter.

## Table verbs

Verbs are functions that operate on a table of data.
They can be combined using a pipe with the `>>` operator.

```{python}
from siuba import _, mutate, filter, group_by, summarize
from siuba.data import mtcars
```

### Mutate

The previous example can be re-written in siuba as the following.

```{python}
(mtcars
  >> group_by(_.cyl)
  >> mutate(demeaned = _.hp - _.hp.mean())
  )
```

Note that there is a key difference: mutate returned a pandas DataFrame with the new column (demeaned) at the end. This is a core feature of siuba verbs--tables in and tables out.


### Filter

Below are examples of keeping certain rows with **filter**, and calculating a single number per group with **summarize**.

```{python}
g_cyl = group_by(mtcars, _.cyl)

# keep lowest hp per group
g_cyl >> filter(_.hp == _.hp.min())
```

### Summarize

```{python}
g_cyl >> summarize(avg_hp = _.hp.mean())
```

## Column operations

The verbs above received a few different calculations as arguments:

* `_.hp.mean()`
* `_.hp.min()`

You can use any methods from the underlying pandas objects as methods.

```{python}
# outside
mtcars.shape[0] + 1

# inside mutate
mtcars >> mutate(res = _.shape[0] + 1)
```

This includes the `str` and `dt` attribute accessor methods:

```{python}
import pandas as pd

df = pd.DataFrame({"x": ["apple", "banana"]})

# outside
df.x.str.contains("a")

# inside mutate
df >> mutate(res = _.x.str.contains("a"))
```

## Using with plotnine

Fortnuately, plotnine supports siuba's style of piping, so is easy to plug in to!

```{python}
from siuba import mutate, _
from plotnine import ggplot, aes, geom_point

(mtcars
  >> mutate(hp_per_cyl = _.hp / _.cyl)
  >> ggplot(aes("cyl", "hp_per_cyl"))
   + geom_point()
)
```

## Next steps

TODO
