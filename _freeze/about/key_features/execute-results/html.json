{
  "hash": "42939d25e9f73c4eb8701f4b1a545cc0",
  "result": {
    "markdown": "---\ntitle: Key features\nexecute:\n  freeze: true\nformat:\n  html:\n    toc-depth: 3\n---\n\n\n\n<div class=\"dataframe\">\n\n+----------------------------------------------------------+---------+------------+----------+\n|                                                          | siuba   | dplython   | pandas   |\n+==========================================================+=========+============+==========+\n| Column operations are pandas Series methods              | ✅      | ✅         | ✅       |\n+----------------------------------------------------------+---------+------------+----------+\n| Table verbs supports user defined functions              | ✅      | ✅         | ✅       |\n+----------------------------------------------------------+---------+------------+----------+\n| pipe syntax (`>>`)                                       | ✅      | ✅         | ❌       |\n+----------------------------------------------------------+---------+------------+----------+\n| concise, <b>lazy expressions</b> (`_.a + _.b`)           | ✅      | ✅         | ❌       |\n+----------------------------------------------------------+---------+------------+----------+\n| No more reset_index                                      | ✅      | ✅         | ❌       |\n+----------------------------------------------------------+---------+------------+----------+\n| <b>unified API</b> over (un)grouped data                 | ✅      | ✅         | ❌       |\n+----------------------------------------------------------+---------+------------+----------+\n| generate fast grouped operations                         | ✅      | ❌         | ✅       |\n+----------------------------------------------------------+---------+------------+----------+\n| <br>generate SQL queries</b>                             | ✅      | ❌         | ❌       |\n+----------------------------------------------------------+---------+------------+----------+\n| Abstract syntax trees for <br>transforming operations<b> | ✅      | ❌         | ❌       |\n+----------------------------------------------------------+---------+------------+----------+\n| handles nested data                                      | ✅      | ❌         | ⚠️        |\n+----------------------------------------------------------+---------+------------+----------+\n\n</div>\n\n\n## Built on pandas\n\npandas is everywhere in python data analysis. The siuba library builds on this incredible work by using pandas Series methods as its reference implementation. This means that you use the pandas methods you've already learned!\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nfrom siuba import _, mutate\n\nmy_data = pd.DataFrame({\n    'g': ['a', 'a', 'b'],\n    'x': [1,2,3],\n})\n\n# pandas\nmy_data.assign(avg = lambda d: d.x.mean())\n\n# siuba\nmutate(my_data, avg = _.x.mean())\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>g</th>\n      <th>x</th>\n      <th>avg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>a</td>\n      <td>1</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>a</td>\n      <td>2</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>b</td>\n      <td>3</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote how you can debug both pieces of code by running and inspecting `df.a.mean()`.\n\nWhile pandas is an incredibly powerful API, its syntax can get quite cumbersome.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n(my_data\n  .assign(avg = lambda d: d.x.mean())    # create new column\n  .loc[lambda d: d.x != 3]               # filter out some rows\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>g</th>\n      <th>x</th>\n      <th>avg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>a</td>\n      <td>1</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>a</td>\n      <td>2</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice how much of this code is writing the word lambda.\n\nLike other ports of the popular R library, dplyr--such as dplython--siuba offers a simple, flexible way to work on tables of data.\n\n### Pipe syntax\n\nThe pipe syntax allows you to import table functions (verbs), rather than having 300+ methods on your DataFrame.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# actions can be imported individually\nfrom siuba import mutate, arrange\n\n# they can be combined using a pipe\nmy_data >> mutate(y = _.x + 1) >> arrange(_.g, -_.x)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>g</th>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>a</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>a</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>b</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Lazy expressions\n\nUsing lazy expressions saves you from repeating the name of your DataFrame over and over.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# rather than repeat the name of your data, you can use lazy expressions ---\nmy_data_frame = pd.DataFrame({'a': [1,2,3]})\n\n\n# bad\nmy_data_frame[\"b\"] = my_data_frame[\"a\"] + 1\nmy_data_frame[\"c\"] = my_data_frame[\"b\"] + 2\n\n# good\nmy_data_frame >> mutate(b = _.a + 1, c = _.b + 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>4</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### No reset_index\n\nNotice how siuba mutate can take a DataFrame, and return a DataFrame.\nMoreover, it doesn't stick columns onto the index.\nThis means you don't need to call `reset_index` all the time.\n\nA common place where `reset_index` is called is after a pandas grouped aggregation.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom siuba.data import mtcars\nfrom siuba import summarize\n\ng_cyl = mtcars.groupby(\"cyl\")\n\nagg_res = g_cyl[[\"hp\", \"mpg\"]].agg(\"mean\")\nagg_res\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hp</th>\n      <th>mpg</th>\n    </tr>\n    <tr>\n      <th>cyl</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>82.636364</td>\n      <td>26.663636</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>122.285714</td>\n      <td>19.742857</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>209.214286</td>\n      <td>15.100000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# bad\nagg_res.reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cyl</th>\n      <th>hp</th>\n      <th>mpg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4</td>\n      <td>82.636364</td>\n      <td>26.663636</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>122.285714</td>\n      <td>19.742857</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>209.214286</td>\n      <td>15.100000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# good\nsummarize(g_cyl, hp = _.hp.mean(), mpg = _.mpg.mean())\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cyl</th>\n      <th>hp</th>\n      <th>mpg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4</td>\n      <td>82.636364</td>\n      <td>26.663636</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>122.285714</td>\n      <td>19.742857</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>209.214286</td>\n      <td>15.100000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Unified (un)grouped API\n\nIn **siuba** it doesn't matter whether your data is grouped or not.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ng_cyl = mtcars.groupby(\"cyl\")\n\nmtcars >> mutate(demeaned = _.hp - _.hp.mean())    # uses ungrouped mean\ng_cyl  >> mutate(demeaned = _.hp - _.hp.mean())    # uses grouped mean\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div><p>(grouped data frame)</p><div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cyl</th>\n      <th>disp</th>\n      <th>hp</th>\n      <th>drat</th>\n      <th>wt</th>\n      <th>qsec</th>\n      <th>vs</th>\n      <th>am</th>\n      <th>gear</th>\n      <th>carb</th>\n      <th>demeaned</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>21.0</td>\n      <td>6</td>\n      <td>160.0</td>\n      <td>110</td>\n      <td>3.90</td>\n      <td>2.620</td>\n      <td>16.46</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>-12.285714</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21.0</td>\n      <td>6</td>\n      <td>160.0</td>\n      <td>110</td>\n      <td>3.90</td>\n      <td>2.875</td>\n      <td>17.02</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>-12.285714</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>301.0</td>\n      <td>335</td>\n      <td>3.54</td>\n      <td>3.570</td>\n      <td>14.60</td>\n      <td>0</td>\n      <td>1</td>\n      <td>5</td>\n      <td>8</td>\n      <td>125.785714</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>21.4</td>\n      <td>4</td>\n      <td>121.0</td>\n      <td>109</td>\n      <td>4.11</td>\n      <td>2.780</td>\n      <td>18.60</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>26.363636</td>\n    </tr>\n  </tbody>\n</table>\n<p>32 rows × 12 columns</p>\n</div></div>\n```\n:::\n:::\n\n\nIn **pandas** you have to change your code for grouped data.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ng_cyl = mtcars.groupby(\"cyl\")\n\n# ungrouped vs grouped mean\nmtcars.assign(demeaned = lambda d: d.hp - d.hp.mean())\nmtcars.assign(demeaned = g_cyl.obj.hp - g_cyl.hp.transform(\"mean\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cyl</th>\n      <th>disp</th>\n      <th>hp</th>\n      <th>drat</th>\n      <th>wt</th>\n      <th>qsec</th>\n      <th>vs</th>\n      <th>am</th>\n      <th>gear</th>\n      <th>carb</th>\n      <th>demeaned</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>21.0</td>\n      <td>6</td>\n      <td>160.0</td>\n      <td>110</td>\n      <td>3.90</td>\n      <td>2.620</td>\n      <td>16.46</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>-12.285714</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21.0</td>\n      <td>6</td>\n      <td>160.0</td>\n      <td>110</td>\n      <td>3.90</td>\n      <td>2.875</td>\n      <td>17.02</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>-12.285714</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>301.0</td>\n      <td>335</td>\n      <td>3.54</td>\n      <td>3.570</td>\n      <td>14.60</td>\n      <td>0</td>\n      <td>1</td>\n      <td>5</td>\n      <td>8</td>\n      <td>125.785714</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>21.4</td>\n      <td>4</td>\n      <td>121.0</td>\n      <td>109</td>\n      <td>4.11</td>\n      <td>2.780</td>\n      <td>18.60</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>26.363636</td>\n    </tr>\n  </tbody>\n</table>\n<p>32 rows × 12 columns</p>\n</div>\n```\n:::\n:::\n\n\nNote that `g_cyl` does not have an `assign` method, and requires passing what operation you want to do (`\"mean\"`) as a string to `.transform()`.\n\n## Fast and flexible\n\n### Fast grouped operations\n\nConsider some data (`students`) where 2,000 students have each completed 10 courses, and received a score on each course.\n\n``` {.python .cell-code}\n# fast grouped operations (pull from dev docs)\n# PLOT of timing\nimport numpy as np\nimport pandas as pd\n\nnp.random.seed(123)\nstudents = pd.DataFrame({\n    'student_id': np.repeat(np.arange(2000), 10),\n    'course_id': np.random.randint(1, 20, 20000),\n    'score': np.random.randint(1, 100, 20000)\n})\n```\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ng_students = students.groupby('student_id')\ng_students\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><p>(grouped data frame)</p><div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>course_id</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>14</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>3</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>19998</th>\n      <td>1999</td>\n      <td>11</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>19999</th>\n      <td>1999</td>\n      <td>17</td>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table>\n<p>20000 rows × 3 columns</p>\n</div></div>\n```\n:::\n:::\n\n\nSuppose that we want to get the courses each student scored lowest on.\n\nIn pandas we could use some complex, but fast code.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n%%time\n# pandas\nis_student_min = g_students.obj.score == g_students.score.transform('min')\nlow_scores = students[is_student_min]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 1.14 ms, sys: 300 µs, total: 1.44 ms\nWall time: 1.37 ms\n```\n:::\n:::\n\n\nIn siuba it is simpler, and comparable in speed.\n\n``` {.python .cell-code}\nfrom siuba.experimental.pd_groups import fast_filter\n```\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n%%time\n# siuba\nlow_scores = fast_filter(g_students, _.score == _.score.min())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 1.76 ms, sys: 199 µs, total: 1.96 ms\nWall time: 1.81 ms\n```\n:::\n:::\n\n\nThis is because siuba's lazy expressions let it optimize grouped operations.\n\nHowever, **dplython is over 100x slower** in this case, because it uses the slower pandas `DataFrame.apply()` method under the hood.\n\n``` {.python .cell-code}\n# set up code for timing\nfrom dplython import X, DplyFrame, sift, group_by as dply_group_by\n\ng_students2 = DplyFrame(students) >> dply_group_by(X.student_id)\n```\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n%%time\ng_students2 >> sift(X.score == X.score.min())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 149 ms, sys: 1.23 ms, total: 150 ms\nWall time: 150 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>course_id</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>3</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1</td>\n      <td>10</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>19987</th>\n      <td>1998</td>\n      <td>17</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>19997</th>\n      <td>1999</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2117 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n### SQL queries\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# generate SQL queries\nfrom siuba.data import cars_sql\nfrom siuba import group_by, mutate, show_query\n\nq = (cars_sql\n  >> group_by(\"cyl\")\n  >> mutate(demeaned = _.hp - _.hp.mean())\n  >> show_query()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSELECT cars.cyl, cars.mpg, cars.hp, cars.hp - avg(cars.hp) OVER (PARTITION BY cars.cyl) AS demeaned \nFROM cars\n```\n:::\n:::\n\n\n### Abstract syntax trees\n\nThis is made possible because siuba represents lazy expressions with abstract syntax trees.\nFast grouped operations and SQL queries are just the beginning. This allows people to produce a whole range of interesting tools!\n\nSiuba's lazy expressions consist of a Symbolic and Call class.\n\nSymbolic is used to quickly create lazy expressions.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# ASTs for transforming\nfrom siuba.siu import Symbolic, Call, strip_symbolic\n\n_ = Symbolic()\n\nsym = _.a.mean() + _[\"b\"]\nsym\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n█─+\n├─█─'__call__'\n│ └─█─.\n│   ├─█─.\n│   │ ├─_\n│   │ └─'a'\n│   └─'mean'\n└─█─[\n  ├─_\n  └─█─'__siu_slice__'\n    └─'b'\n```\n:::\n:::\n\n\nEach black box in the printout above is a Call. Calls are the pieces that represent the underlying operations. They have methods to inspect and transform them.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ncall = strip_symbolic(sym)\n\n# get columns names used in lazy expression\ncall.op_vars(attr_calls = False)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n{'a'}\n```\n:::\n:::\n\n\n### Nested data\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nfrom siuba import _, mutate, unnest\n\ntagged = pd.DataFrame({\n    'id': [1,2,3],\n    'tags': ['a,b,c', 'd,e', 'f']\n})\n\n(tagged\n    >> mutate(split_tags = _.tags.str.split(','))\n    >> unnest(\"split_tags\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>tags</th>\n      <th>split_tags</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a,b,c</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>a,b,c</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>d,e</td>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>f</td>\n      <td>f</td>\n    </tr>\n  </tbody>\n</table>\n<p>6 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Learning more\n\n",
    "supporting": [
      "key_features_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}